FORMAT: 1A
HOST: https://tv-v2.api-fetch.website/

// TODO: make sure the documentation is correct.

# Popcorn API
Popcorn API is developed to make it easier for anyone to create their own version of [Popcorn Time](https://popcorntime.sh/).

# Data Structures

## Status
repo: (string, required)
server: (string, required)
status: (string, required)
totalAnimes: (number, required)
totalMovies: (number, required)
totalShows: (number, required)
updated: (number, required)
uptime: (number, required)
version: (string, required)
commit: (string, required)

## Movie
_id: (string, required)
imdb_id: (string, required)
title: (string, required)
year: (number, required)
slug: (string, optional)
synopsis: (string, required)
runtime: (number, required)
released: (number,  required)
trailer: (string,  required)
certification: (string,  required)
torrents: (MovieLanguages, required)
genres: (array[string], required)
images: (Images, required)
rating: (Rating, required)
type: (string, required)
language: (string,  optional)

## MovieLanguages
en: (MovieTorrents, optional)
es: (MovieTorrents, optional)
fr: (MovieTorrents, optional)
de: (MovieTorrents, optional)
nl: (MovieTorrents, optional)

## MovieTorrents
720p: (Torrent, optional)
1080p: (Torrent, optional)

## Show
_id: (string, required)
imdb_id: (string, required)
title: (string, required)
year: (number, required)
slug: (string, required)
synopsis: (string, optional)
runtime: (number, optional)
rating: (Rating, required)
images: (Images, required)
genres: (array[string], required)
type: (string, required)
tvdb_id: (string, required)
country: (string, optional)
network: (string, optional)
air_day: (string, optional)
air_time: (string, optional)
status: (string, optional)
num_seasons: (number, required)
last_updated: (number, optional)
latest_episode: (number, optional)
episodes: (array[Episode], optional)

## Rating
percentage: (number, required)
watching: (number, required)
votes: (number, required)

## Images
poster: (string, required)
fanart: (string, required)
banner: (string, required)

## Episode
tvdb_id: (number, required)
season: (number, required)
episode: (number, required)
title: (string, required)
overview: (string, required)
date_based: (boolean, required)
first_aired: (number, required)
torrents: (ShowTorrents, required)

## ShowTorrents
0: (Torrent, required)
480p: (Torrent, optional)
720p: (Torrent, optional)
1080p: (Torrent, optional)

## Torrent
provider: (string, required)
filesize: (string, optional)
size: (number, optional)
peers: (number, required)
seeds: (number, required)
url: (string, required)

# Group Status

## Status [/status]

### Get Status [GET]

Gives some basic information about the server on which the API is running on.
  + Response 200 (application/json; charset=utf-8)

      + Body

            {
                "repo": "https://github.com/popcorn-official/popcorn-api.git",
                "server": "serv01",
                "status": "Idle",
                "totalAnimes": 623,
                "totalMovies": 5581,
                "totalShows": 1479,
                "updated": 1470262496,
                "uptime": 50529,
                "version": "2.1.0",
                "commit": "d8e360f"
            }

      + Attributes (Status)


# Group Logs

## Error Logs [/logs/error]

### Get Error Logs [GET]
Display the error log. Each message will be in JSON format.
  + Response 200 (text/plain; charset=UTF-8)

  + Response 500 (application/json; charset=utf-8)

      + Body

            {
                "error": "Error: could not find file: './tmp/popcorn-api.log'"
            }

      + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "type": "object",
                "properties": {
                    "error": {
                        "type": "string"
                    }
                }
            }


# Group Export

## Export [/exports/{collection}]

### Export Collection [GET]
Download the contents a collection in a JSON file.
  + Parameters
      + collection (string, `anime`) - The name of the collection you want to download.
          + Values
              + `anime`
              + `movie`
              + `show`

  + Response 500 (application/json; charset=utf-8)

      + Body

            {
                "error": "Error: no such file found for './tmp/animes.json'"
            }

            {
                "error": "Error: invalid is not a valid collection to export.'"
            }

      + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "type": "object",
                "properties": {
                    "error": {
                        "type": "string"
                    }
                }
            }

  + Response 200 (application/json)


# Group Anime

## Get Pages [/animes]

### Pages [GET]
Gives an array of the available pages for anime content.
  + Response 200 (application/json; charset=utf-8)

      + Body

            ["animes/1","animes/2","animes/3","animes/4","animes/5","animes/6","animes/7","animes/8","animes/9","animes/10"]

      + Attributes (array[string])

  + Response 204 (charset=utf-8)

## Get Page [/animes/{page}{?sort,order,genre,keywords}]

### Page [GET]
Gives an array of anime shows. The array has a has a maximum length of 50 anime shows per page.
  + Parameters
      + page (number, `1`) - The page of the content you want.
      + sort (string, `rating`) - Sort the list of content.
          + Values
            + `name`
            + `rating`
            + `released`
            + `trending`
            + `updated`
            + `year`
      + order (number, `-1`) - Order the list of content.
          + Values
              + `1`
              + `-1`
      + genre (string, `all`) - Filter on a genre.
      + keywords (string, `string`) - Search based on keywords.

  + Response 200 (application/json; charset=utf-8)

      + Body

            [{"_id":"UniqueString1","imdb_id":"UniqueString1","title":"String","year":0,"slug":"String","synopsis":"String","runtime":0,"rating":{"percentage":0,"watching":0,"votes":0},"images":{"banner":"String","fanart":"String","poster":"String"},"genres":["String"],"type":"String","language":"String","released":0,"trailer":"String","certification":"String","torrents":{"en":{"1080p":{"provider":"String","filesize":"String","size":0,"peer":0,"seed":0,"url":"String"},"720p":{"provider":"String","filesize":"String","size":0,"peer":0,"seed":0,"url":"String"}}}},{"_id":"UniqueString2","imdb_id":"UniqueString2","title":"String","year":0,"slug":"String","synopsis":"String","runtime":0,"rating":{"percentage":0,"watching":0,"votes":0},"images":{"banner":"String","fanart":"String","poster":"String"},"genres":["String"],"type":"String","tvdb_id":"String","country":"String","network":"String","air_day":"String","air_time":"String","status":"String","num_seasons":1,"last_updated":0,"latest_episode":0,"episodes":[{"tvdb_id":0,"season":0,"episode":0,"title":"String","overview":"String","date_based":false,"first_aired":0,"torrents":{"0":{"provider":"String","peers":0,"seeds":0,"url":"String"},"480p":{"provider":"String","peers":0,"seeds":0,"url":"String"},"720p":{"provider":"String","peers":0,"seeds":0,"url":"String"},"1080p":{"provider":"String","peers":0,"seeds":0,"url":"String"}}}]}]

      + Attributes (array[Movie]) (array[Show])

  + Response 204 (charset=utf-8)

## Get Details [/anime/{imdb_id}]

### Details [GET]
Gives information about a single anime show based on the given id.
  + Parameters
      + imdb_id (string, `animeshow`) - The imdb id of the anime you want details on.

  + Response 200 (application/json; charset=utf-8)

      + Body

            {"_id":"UniqueString1","imdb_id":"UniqueString1","title":"String","year":0,"slug":"String","synopsis":"String","runtime":0,"rating":{"percentage":0,"watching":0,"votes":0},"images":{"banner":"String","fanart":"String","poster":"String"},"genres":["String"],"type":"String","language":"String","released":0,"trailer":"String","certification":"String","torrents":{"en":{"1080p":{"provider":"String","filesize":"String","size":0,"peer":0,"seed":0,"url":"String"},"720p":{"provider":"String","filesize":"String","size":0,"peer":0,"seed":0,"url":"String"}}}}

            {"_id":"UniqueString2","imdb_id":"UniqueString2","title":"String","year":0,"slug":"String","synopsis":"String","runtime":0,"rating":{"percentage":0,"watching":0,"votes":0},"images":{"banner":"String","fanart":"String","poster":"String"},"genres":["String"],"type":"String","tvdb_id":"String","country":"String","network":"String","air_day":"String","air_time":"String","status":"String","num_seasons":1,"last_updated":0,"latest_episode":0,"episodes":[{"tvdb_id":0,"season":0,"episode":0,"title":"String","overview":"String","date_based":false,"first_aired":0,"torrents":{"0":{"provider":"String","peers":0,"seeds":0,"url":"String"},"480p":{"provider":"String","peers":0,"seeds":0,"url":"String"},"720p":{"provider":"String","peers":0,"seeds":0,"url":"String"},"1080p":{"provider":"String","peers":0,"seeds":0,"url":"String"}}}]}

      + Attributes (Movie) (Show)

  + Response 204 (charset=utf-8)

## Get Random [/random/anime]

### Random [GET]
Gives a random anime from the database.
  + Response 200 (application/json; charset=utf-8)

      + Body

            {"_id":"UniqueString1","imdb_id":"UniqueString1","title":"String","year":0,"slug":"String","synopsis":"String","runtime":0,"rating":{"percentage":0,"watching":0,"votes":0},"images":{"banner":"String","fanart":"String","poster":"String"},"genres":["String"],"type":"String","language":"String","released":0,"trailer":"String","certification":"String","torrents":{"en":{"1080p":{"provider":"String","filesize":"String","size":0,"peer":0,"seed":0,"url":"String"},"720p":{"provider":"String","filesize":"String","size":0,"peer":0,"seed":0,"url":"String"}}}}

            {"_id":"UniqueString2","imdb_id":"UniqueString2","title":"String","year":0,"slug":"String","synopsis":"String","runtime":0,"rating":{"percentage":0,"watching":0,"votes":0},"images":{"banner":"String","fanart":"String","poster":"String"},"genres":["String"],"type":"String","tvdb_id":"String","country":"String","network":"String","air_day":"String","air_time":"String","status":"String","num_seasons":1,"last_updated":0,"latest_episode":0,"episodes":[{"tvdb_id":0,"season":0,"episode":0,"title":"String","overview":"String","date_based":false,"first_aired":0,"torrents":{"0":{"provider":"String","peers":0,"seeds":0,"url":"String"},"480p":{"provider":"String","peers":0,"seeds":0,"url":"String"},"720p":{"provider":"String","peers":0,"seeds":0,"url":"String"},"1080p":{"provider":"String","peers":0,"seeds":0,"url":"String"}}}]}

      + Attributes (Movie) (Show)

  + Response 204 (charset=utf-8)


# Group Movie

## Get Pages [/movies]

### Pages [GET]
Gives an array of the available pages for movie content.
  + Response 200 (application/json; charset=utf-8)

      + Body

            ["movies/1","movies/2","movies/3","movies/4","movies/5","movies/6","movies/7","movies/8","movies/9","movies/10"]

      + Attributes (array[string])

  + Response 204 (charset=utf-8)

## Get Page [/movies/{page}{?sort,order,genre,keywords}]

### Page [GET]
Gives an array of movies. The array has a has a maximum length of 50 movies per page.
  + Parameters
      + page (number, `1`) - The page of the content you want.
      + sort (string, `rating`) - Sort the list of content.
          + Values
              + `name`
              + `rating`
              + `released`
              + `trending`
              + 'last added'
              + `year`
      + order (number, `-1`) - Order the list of content.
          + Values
              + `1`
              + `-1`
      + genre (string, `all`) - Filter on a genre.
      + keywords (string, `string`) - Search based on keywords.

  + Response 200 (application/json; charset=utf-8)

      + Body

            [{"_id":"UniqueString1","imdb_id":"UniqueString1","title":"String","year":0,"slug":"String","synopsis":"String","runtime":0,"rating":{"percentage":0,"watching":0,"votes":0},"images":{"banner":"String","fanart":"String","poster":"String"},"genres":["String"],"type":"String","language":"String","released":0,"trailer":"String","certification":"String","torrents":{"en":{"1080p":{"provider":"String","filesize":"String","size":0,"peer":0,"seed":0,"url":"String"},"720p":{"provider":"String","filesize":"String","size":0,"peer":0,"seed":0,"url":"String"}}}}]

      + Attributes (array[Movie])

  + Response 204 (charset=utf-8)

## Get Details [/movie/{imdb_id}]

### Details [GET]
Gives information about a single movie based on the given imdb id.
  + Parameters
      + imdb_id (string, `movie`) - The imdb id of the movie you want details on.

  + Response 200 (application/json; charset=utf-8)

      + Body

            {"_id":"UniqueString1","imdb_id":"UniqueString1","title":"String","year":0,"slug":"String","synopsis":"String","runtime":0,"rating":{"percentage":0,"watching":0,"votes":0},"images":{"banner":"String","fanart":"String","poster":"String"},"genres":["String"],"type":"String","language":"String","released":0,"trailer":"String","certification":"String","torrents":{"en":{"1080p":{"provider":"String","filesize":"String","size":0,"peer":0,"seed":0,"url":"String"},"720p":{"provider":"String","filesize":"String","size":0,"peer":0,"seed":0,"url":"String"}}}}

      + Attributes (Movie)

  + Response 204 (charset=utf-8)

## Get Random [/random/movie]

### Random [GET]
Gives a random movie from the database.
  + Response 200 (application/json; charset=utf-8)

      + Body

            {"_id":"UniqueString1","imdb_id":"UniqueString1","title":"String","year":0,"slug":"String","synopsis":"String","runtime":0,"rating":{"percentage":0,"watching":0,"votes":0},"images":{"banner":"String","fanart":"String","poster":"String"},"genres":["String"],"type":"String","language":"String","released":0,"trailer":"String","certification":"String","torrents":{"en":{"1080p":{"provider":"String","filesize":"String","size":0,"peer":0,"seed":0,"url":"String"},"720p":{"provider":"String","filesize":"String","size":0,"peer":0,"seed":0,"url":"String"}}}}

      + Attributes (Movie)

  + Response 204 (charset=utf-8)


# Group Show

## Get Pages [/shows]

### Pages [GET]
Gives an array of the available pages for show content.
  + Response 200 (application/json; charset=utf-8)

      + Body

            ["shows/1","shows/2","shows/3","shows/4","shows/5","shows/6","shows/7","shows/8","shows/9","shows/10"]

      + Attributes (array[string])

  + Response 204 (charset=utf-8)

## Get Page [/shows/{page}{?sort,order,genre,keywords}]

### Page [GET]
Gives an array of shows. The array has a has a maximum length of 50 shows per page.
  + Parameters
      + page (number, `1`) - The page of the content you want.
      + sort (string, `rating`) - Sort the list of content.
          + Values
              + `name`
              + `rating`
              + `released`
              + `trending`
              + `updated`
              + `year`
      + order (number, `-1`) - Order the list of content.
          + Values
              + `1`
              + `-1`
      + genre (string, `all`) - Filter on a genre.
      + keywords (string, `string`) - Search based on keywords.

  + Response 200 (application/json; charset=utf-8)

      + Body

            [{"_id":"UniqueString2","imdb_id":"UniqueString2","title":"String","year":0,"slug":"String","synopsis":"String","runtime":0,"rating":{"percentage":0,"watching":0,"votes":0},"images":{"banner":"String","fanart":"String","poster":"String"},"genres":["String"],"type":"String","tvdb_id":"String","country":"String","network":"String","air_day":"String","air_time":"String","status":"String","num_seasons":1,"last_updated":0,"latest_episode":0,"episodes":[{"tvdb_id":0,"season":0,"episode":0,"title":"String","overview":"String","date_based":false,"first_aired":0,"torrents":{"0":{"provider":"String","peers":0,"seeds":0,"url":"String"},"480p":{"provider":"String","peers":0,"seeds":0,"url":"String"},"720p":{"provider":"String","peers":0,"seeds":0,"url":"String"},"1080p":{"provider":"String","peers":0,"seeds":0,"url":"String"}}}]}]

      + Attributes (array[Show])

  + Response 204 (charset=utf-8)

## Get Details [/show/{imdb_id}]

### Details [GET]
Gives information about a single show based on the given imdb id.
  + Parameters
      + imdb_id (string, `show`) - The imdb id of the show you want details on.

  + Response 200 (application/json; charset=utf-8)

      + Body

            {"_id":"UniqueString2","imdb_id":"UniqueString2","title":"String","year":0,"slug":"String","synopsis":"String","runtime":0,"rating":{"percentage":0,"watching":0,"votes":0},"images":{"banner":"String","fanart":"String","poster":"String"},"genres":["String"],"type":"String","tvdb_id":"String","country":"String","network":"String","air_day":"String","air_time":"String","status":"String","num_seasons":1,"last_updated":0,"latest_episode":0,"episodes":[{"tvdb_id":0,"season":0,"episode":0,"title":"String","overview":"String","date_based":false,"first_aired":0,"torrents":{"0":{"provider":"String","peers":0,"seeds":0,"url":"String"},"480p":{"provider":"String","peers":0,"seeds":0,"url":"String"},"720p":{"provider":"String","peers":0,"seeds":0,"url":"String"},"1080p":{"provider":"String","peers":0,"seeds":0,"url":"String"}}}]}

      + Attributes (Show)

  + Response 204 (charset=utf-8)

## Get Random [/random/show]

### Random [GET]
Gives a random show from the database.
  + Response 200 (application/json; charset=utf-8)

      + Body

            {"_id":"UniqueString2","imdb_id":"UniqueString2","title":"String","year":0,"slug":"String","synopsis":"String","runtime":0,"rating":{"percentage":0,"watching":0,"votes":0},"images":{"banner":"String","fanart":"String","poster":"String"},"genres":["String"],"type":"String","tvdb_id":"String","country":"String","network":"String","air_day":"String","air_time":"String","status":"String","num_seasons":1,"last_updated":0,"latest_episode":0,"episodes":[{"tvdb_id":0,"season":0,"episode":0,"title":"String","overview":"String","date_based":false,"first_aired":0,"torrents":{"0":{"provider":"String","peers":0,"seeds":0,"url":"String"},"480p":{"provider":"String","peers":0,"seeds":0,"url":"String"},"720p":{"provider":"String","peers":0,"seeds":0,"url":"String"},"1080p":{"provider":"String","peers":0,"seeds":0,"url":"String"}}}]}


      + Attributes (Show)

  + Response 204 (charset=utf-8)


# Group Genres

## Genres
Popcorn API supports the following genres:
 - action
 - adventure
 - animation
 - comedy
 - crime
 - disaster
 - documentary
 - drama
 - eastern
 - family
 - fan-film
 - fantasy
 - film-noir
 - history
 - holiday
 - horror
 - indie
 - music
 - mystery
 - none
 - road
 - romance
 - science-fiction
 - short
 - sports
 - sporting-event
 - suspense
 - thriller
 - tv-movie
 - war
 - western
